package main

import (
	"context"
	"log"
	"net/http"
	"os"

	"github.com/aquasecurity/trivy/pkg/commands/artifact"
	"github.com/aquasecurity/trivy/pkg/flag"
	"github.com/aquasecurity/trivy/pkg/types"
	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
)

type CheckRequest struct {
	Type string `json:"type" binding:"required"`
	URL  string `json:"url" binding:"required"`
}

type Checkresponse struct {
	Error  string       `json:"error"`
	Report types.Report `json:"report"`
}

func main() {

	version := "dev"
	globalFlags := flag.NewGlobalFlagGroup()

	configPath := "config/trivy-default.yaml"
	if err := initConfig(configPath); err != nil {
		log.Fatal(err)
	}

	reportFlagGroup := flag.NewReportFlagGroup()
	reportFlagGroup.ReportFormat = nil

	imageFlags := &flag.Flags{
		CacheFlagGroup:         flag.NewCacheFlagGroup(),
		DBFlagGroup:            flag.NewDBFlagGroup(),
		ImageFlagGroup:         flag.NewImageFlagGroup(), // container image specific
		LicenseFlagGroup:       flag.NewLicenseFlagGroup(),
		MisconfFlagGroup:       flag.NewMisconfFlagGroup(),
		RemoteFlagGroup:        flag.NewClientFlags(), // for client/server mode
		RegoFlagGroup:          flag.NewRegoFlagGroup(),
		ReportFlagGroup:        reportFlagGroup,
		ScanFlagGroup:          flag.NewScanFlagGroup(),
		SecretFlagGroup:        flag.NewSecretFlagGroup(),
		VulnerabilityFlagGroup: flag.NewVulnerabilityFlagGroup(),
	}

	router := gin.Default()
	apiV1 := router.Group("/v1")
	apiV1.POST("check", func(c *gin.Context) {
		var checkRequest CheckRequest
		if err := c.ShouldBindJSON(&checkRequest); err != nil {
			c.JSON(http.StatusBadRequest, Checkresponse{Error: "Bad request in input body"})
			return
		}

		options, err := imageFlags.ToOptions(version, []string{checkRequest.URL}, globalFlags, os.Stdout)
		if err != nil {
			c.JSON(http.StatusInternalServerError, Checkresponse{Error: "Internal server error"})
			return
		}
		report, err := scanImage(context.Background(), options)
		if err != nil {
			c.JSON(http.StatusInternalServerError, Checkresponse{Error: "Internal server error"})
			return
		}

		c.JSON(http.StatusOK, Checkresponse{Report: report})

	})

	_ = router.Run(":8081")
}

func initConfig(configFile string) error {
	viper.SetConfigFile(configFile)
	viper.SetConfigType("yaml")
	if err := viper.ReadInConfig(); err != nil {
		return err
	}
	return nil
}

func scanImage(ctx context.Context, opts flag.Options) (types.Report, error) {
	ctx, cancel := context.WithTimeout(ctx, opts.Timeout)
	defer cancel()

	r, err := artifact.NewRunner(ctx, opts)
	if err != nil {
		return types.Report{}, err
	}
	defer r.Close(ctx)

	var report types.Report
	if report, err = r.ScanImage(ctx, opts); err != nil {
		return types.Report{}, err
	}
	report, err = r.Filter(ctx, opts, report)
	if err != nil {
		return types.Report{}, err
	}

	return report, nil
}
